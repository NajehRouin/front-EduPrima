{
    "sourceFile": "src/pages/Eleve/DashboardEleve.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748471618224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748471618224,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport { Link, Outlet, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { deconnecte } from \"../../utils/auth\";\r\nimport { FiBell } from \"react-icons/fi\";\r\nimport socket from \"../../utils/socket\";\r\nimport Api from \"../../Api/Eleve\";\r\n\r\nfunction DashboardEleve() {\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const navigate = useNavigate();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isProfileOpen, setIsProfileOpen] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [notificationCount, setNotificationCount] = useState(0);\r\n  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);\r\n\r\n  const location = useLocation();\r\n\r\n  // Toggle menu mobile\r\n  const toggleMenu = () => setIsOpen(!isOpen);\r\n  const toggleProfileMenu = () => setIsProfileOpen(!isProfileOpen);\r\n  const toggleNotifications = () => {\r\n    setIsNotificationsOpen(!isNotificationsOpen);\r\n    setNotificationCount(0);\r\n  };\r\n\r\n  // Fonction pour d√©terminer si un lien est actif\r\n  const isActive = (path) => {\r\n    return location.pathname === path;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(Api.notification.url, {\r\n      method: Api.notification.method,\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setNotifications(data);\r\n        setNotificationCount(data.length);\r\n      })\r\n      .catch((err) => console.error(\"Erreur fetch notifications :\", err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Enregistrer l'utilisateur aupr√®s du serveur socket\r\n    if (user?._id) {\r\n      socket.emit(\"registerUser\", user._id);\r\n    }\r\n\r\n    // √âcouter les notifications envoy√©es par le serveur\r\n    socket.on(\"newNotification\", (data) => {\r\n      console.log(\"üîî Nouvelle notification :\", data);\r\n      setNotifications((prev) => [data, ...prev]);\r\n      setNotificationCount((count) => count + 1);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"newNotification\");\r\n    };\r\n  }, [user]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen\">\r\n      {/* Header */}\r\n      <header className=\"bg-blue-600 text-white p-4 flex justify-between items-center relative\">\r\n        <h1 className=\"text-lg font-bold\">\r\n          Espace √©l√®ve Bonjour {user?.email}{\" \"}\r\n        </h1>\r\n\r\n        <div className=\"flex items-center space-x-4\">\r\n          {/* Bouton menu mobile */}\r\n          <button onClick={toggleMenu} className=\"md:hidden\">\r\n            <svg\r\n              className=\"w-6 h-6\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M4 6h16M4 12h16M4 18h16\"\r\n              />\r\n            </svg>\r\n          </button>\r\n\r\n          {/* Ic√¥ne notification */}\r\n          <div className=\"relative cursor-pointer\">\r\n            <FiBell\r\n              className=\"w-6 h-6 text-white\"\r\n              onClick={toggleNotifications}\r\n            />\r\n            <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full px-1\">\r\n              {notificationCount}\r\n            </span>\r\n          </div>\r\n\r\n          {/* Menu profil */}\r\n          <div className=\"relative\">\r\n            <button\r\n              onClick={toggleProfileMenu}\r\n              className=\"flex items-center justify-center w-8 h-8 rounded-full bg-blue-700 hover:bg-blue-800 focus:outline-none\"\r\n            >\r\n              <svg\r\n                className=\"w-5 h-5\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={2}\r\n                  d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\r\n                />\r\n              </svg>\r\n            </button>\r\n\r\n            {/* Menu d√©roulant profil */}\r\n            {isProfileOpen && (\r\n              <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50\">\r\n                <p className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:cursor-pointer\">\r\n                  {user?.nom}\r\n                </p>\r\n                <Link\r\n                  to=\"/eleve/profil\"\r\n                  className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                  onClick={() => setIsProfileOpen(false)}\r\n                >\r\n                  Profil\r\n                </Link>\r\n                <p\r\n                  className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:cursor-pointer\"\r\n                  onClick={() => {\r\n                    deconnecte();\r\n                    navigate(\"/\");\r\n                  }}\r\n                >\r\n                  D√©connexion\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </header>\r\n      {/* Menu Notifications */}\r\n      {isNotificationsOpen && (\r\n        <div className=\"absolute right-12 mt-16  bg-white rounded-md shadow-lg py-1 z-50\">\r\n          <div className=\"p-4 flex justify-between items-center border-b border-gray-200\">\r\n            <h2 className=\"text-lg font-semibold text-gray-700\">\r\n              Notifications\r\n            </h2>\r\n            {/* Close button */}\r\n            <button\r\n              onClick={() => setIsNotificationsOpen(false)}\r\n              className=\"text-gray-500 hover:text-gray-700 focus:outline-none\"\r\n            >\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"w-5 h-5\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M6 18L18 6M6 6l12 12\"\r\n                />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          {notifications.length === 0 ? (\r\n            <p className=\"px-4 py-2 text-sm text-gray-500\">\r\n              Aucune notification.\r\n            </p>\r\n          ) : (\r\n            <ul className=\"space-y-2 max-h-60 overflow-y-auto\">\r\n              {notifications.map((notif, index) => (\r\n                <li\r\n                  key={index}\r\n                  className=\"px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 cursor-pointer transition\"\r\n                  onClick={() => navigate(\"/eleve/dashboard\")}\r\n                >\r\n                  <div className=\"flex justify-between items-end\">\r\n                    <span>{notif.message}</span>\r\n                    <span className=\"text-xs text-gray-500 ml-4\">\r\n                      {new Date(notif.date || Date.now()).toLocaleString()}\r\n                    </span>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex flex-1\">\r\n        {/* Sidebar */}\r\n        <aside\r\n          className={`bg-gray-100 w-64 space-y-6 py-7 px-2 absolute inset-y-0 left-0 transform ${\r\n            isOpen ? \"translate-x-0\" : \"-translate-x-full\"\r\n          } md:relative md:translate-x-0 transition duration-200 ease-in-out`}\r\n        >\r\n          <nav>\r\n            <Link\r\n              to=\"/eleve/dashboard\"\r\n              className={`block py-2.5 px-4 rounded transition duration-200 ${\r\n                isActive(\"/eleve/dashboard\")\r\n                  ? \"bg-blue-600 text-white\"\r\n                  : \"hover:bg-blue-500 hover:text-white\"\r\n              }`}\r\n            >\r\n              Liste des cours\r\n            </Link>\r\n\r\n            <Link\r\n              to=\"/eleve/dashboard/chat\"\r\n              className={`block py-2.5 px-4 rounded transition duration-200 ${\r\n                isActive(\"/eleve/dashboard/chat\")\r\n                  ? \"bg-blue-600 text-white\"\r\n                  : \"hover:bg-blue-500 hover:text-white\"\r\n              }`}\r\n            >\r\n              Message\r\n            </Link>\r\n          </nav>\r\n        </aside>\r\n\r\n        {/* Main Content */}\r\n        <main className=\"flex-1 p-6 bg-gray-50\">\r\n          <Outlet />\r\n        </main>\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"bg-blue-600 text-white p-4 text-center\">\r\n        &copy; {new Date().getFullYear()} Student Dashboard. Tous droits\r\n        r√©serv√©s.\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashboardEleve;\r\n"
        }
    ]
}