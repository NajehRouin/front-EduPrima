{
    "sourceFile": "src/components/AjouterEnseignant.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748456069738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748456100947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,14 @@\n   const [nom, setNom] = useState(\"\");\r\n   const [email, setEmail] = useState(\"\");\r\n   const [motDePasse, setMotDePasse] = useState(\"\");\r\n   const [specialite, SetSpecialite] = useState(\"\");\r\n-const [specialites, setSpecialites] = useState([]);\r\n+  const [specialites, setSpecialites] = useState([]);\r\n   const [otherClasses, setOtherClasses] = useState([]);\r\n   const [selectedClasseIds, setSelectedClasseIds] = useState([\r\n     selectedClasse._id,\r\n   ]); // Initialiser avec selectedClasse._id\r\n- const [errors, setErrors] = useState({});\r\n+  const [errors, setErrors] = useState({});\r\n   const getAllClasses = async () => {\r\n     try {\r\n       const dataResponse = await fetch(Apiclasse.getAllClasse.url, {\r\n         method: Apiclasse.getAllClasse.method,\r\n@@ -54,9 +54,9 @@\n     }\r\n   };\r\n   useEffect(() => {\r\n     getAllClasses();\r\n-    getAllSpecialite()\r\n+    getAllSpecialite();\r\n   }, [selectedClasse]);\r\n \r\n   const handleAddClasse = (e) => {\r\n     const selectedId = e.target.value;\r\n@@ -67,10 +67,9 @@\n     }\r\n   };\r\n \r\n   const handleSubmit = async () => {\r\n-\r\n-   const newErrors = {};\r\n+    const newErrors = {};\r\n     if (!nom) newErrors.nom = \"Champ obligatoire\";\r\n     if (!email) newErrors.email = \"Champ obligatoire\";\r\n     if (!motDePasse) newErrors.motDePasse = \"Champ obligatoire\";\r\n     if (!specialite) newErrors.specialite = \"Champ obligatoire\";\r\n@@ -126,9 +125,9 @@\n               onChange={(e) => setNom(e.target.value)}\r\n               className=\"border p-2 w-full rounded-md\"\r\n               placeholder=\"Nom\"\r\n             />\r\n-                {errors.nom && (\r\n+            {errors.nom && (\r\n               <p className=\"text-red-500 text-sm mt-1\">{errors.nom}</p>\r\n             )}\r\n           </div>\r\n           <div className=\"mb-4\">\r\n@@ -139,9 +138,9 @@\n               onChange={(e) => setEmail(e.target.value)}\r\n               className=\"border p-2 w-full rounded-md\"\r\n               placeholder=\"Email\"\r\n             />\r\n-               {errors.email && (\r\n+            {errors.email && (\r\n               <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\r\n             )}\r\n           </div>\r\n           <div className=\"mb-4\">\r\n@@ -152,9 +151,9 @@\n               onChange={(e) => setMotDePasse(e.target.value)}\r\n               className=\"border p-2 w-full rounded-md\"\r\n               placeholder=\"Mot de passe\"\r\n             />\r\n-               {errors.motDePasse && (\r\n+            {errors.motDePasse && (\r\n               <p className=\"text-red-500 text-sm mt-1\">{errors.motDePasse}</p>\r\n             )}\r\n           </div>\r\n \r\n@@ -187,9 +186,9 @@\n                   {classe.niveau} {classe.nomClasse}\r\n                 </option>\r\n               ))}\r\n             </select>\r\n-             {errors.classes && (\r\n+            {errors.classes && (\r\n               <p className=\"text-red-500 text-sm mt-1\">{errors.classes}</p>\r\n             )}\r\n           </div>\r\n \r\n@@ -213,9 +212,9 @@\n               </ul>\r\n             </div>\r\n           )}\r\n \r\n-      <div className=\"mb-4\">\r\n+          <div className=\"mb-4\">\r\n             <label className=\"block text-gray-700\">Spécialité</label>\r\n             <select\r\n               className=\"border p-2 w-full rounded-md\"\r\n               onChange={(e) => SetSpecialite(e.target.value)}\r\n"
                },
                {
                    "date": 1748456319841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,23 @@\n import React, { useEffect, useState } from \"react\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n import \"react-toastify/dist/ReactToastify.css\";\r\n+import { FaTrash } from \"react-icons/fa\"; // Import FaTrash for the remove button\r\n import ApiEnseignant from \"../Api/Enseignant\";\r\n import Apiclasse from \"../Api/classe\";\r\n import ApiSpecialite from \"../Api/Specialite\";\r\n \r\n function AjouterEnseignant({ isOpen, closeModal, selectedClasse, fetchdata }) {\r\n   const [nom, setNom] = useState(\"\");\r\n   const [email, setEmail] = useState(\"\");\r\n   const [motDePasse, setMotDePasse] = useState(\"\");\r\n-  const [specialite, SetSpecialite] = useState(\"\");\r\n+  const [specialite, setSpecialite] = useState(\"\");\r\n   const [specialites, setSpecialites] = useState([]);\r\n   const [otherClasses, setOtherClasses] = useState([]);\r\n-  const [selectedClasseIds, setSelectedClasseIds] = useState([\r\n-    selectedClasse._id,\r\n-  ]); // Initialiser avec selectedClasse._id\r\n+  const [selectedClasseIds, setSelectedClasseIds] = useState([selectedClasse._id]);\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false); // State for dropdown visibility\r\n   const [errors, setErrors] = useState({});\r\n+\r\n   const getAllClasses = async () => {\r\n     try {\r\n       const dataResponse = await fetch(Apiclasse.getAllClasse.url, {\r\n         method: Apiclasse.getAllClasse.method,\r\n@@ -47,27 +48,39 @@\n       });\r\n \r\n       const response = await dataResponse.json();\r\n       setSpecialites(response?.result || []);\r\n-      console.log(\"response?.result\", response?.result);\r\n     } catch (error) {\r\n       console.log(\"Erreur lors de la récupération des specialite\", error);\r\n     }\r\n   };\r\n+\r\n   useEffect(() => {\r\n     getAllClasses();\r\n     getAllSpecialite();\r\n   }, [selectedClasse]);\r\n \r\n-  const handleAddClasse = (e) => {\r\n-    const selectedId = e.target.value;\r\n+  const toggleDropdown = () => {\r\n+    setIsDropdownOpen(!isDropdownOpen);\r\n+  };\r\n \r\n-    // Empêcher les doublons\r\n-    if (!selectedClasseIds.includes(selectedId)) {\r\n-      setSelectedClasseIds([...selectedClasseIds, selectedId]);\r\n+  const handleAddClasse = (classeId) => {\r\n+    if (selectedClasseIds.includes(classeId)) {\r\n+      // If already selected, remove it\r\n+      setSelectedClasseIds(selectedClasseIds.filter((id) => id !== classeId));\r\n+    } else {\r\n+      // Add new class ID\r\n+      setSelectedClasseIds([...selectedClasseIds, classeId]);\r\n     }\r\n   };\r\n \r\n+  const handleRemoveClasse = (classeId) => {\r\n+    // Prevent removing the initially selected class\r\n+    if (classeId !== selectedClasse._id) {\r\n+      setSelectedClasseIds(selectedClasseIds.filter((id) => id !== classeId));\r\n+    }\r\n+  };\r\n+\r\n   const handleSubmit = async () => {\r\n     const newErrors = {};\r\n     if (!nom) newErrors.nom = \"Champ obligatoire\";\r\n     if (!email) newErrors.email = \"Champ obligatoire\";\r\n@@ -97,9 +110,8 @@\n     const response = await dataResponse.json();\r\n     if (response.success) {\r\n       toast.success(response.msg);\r\n       fetchdata();\r\n-      // Après 2 secondes (2000ms), on ferme le modal\r\n       setTimeout(() => {\r\n         closeModal();\r\n       }, 2000);\r\n     } else {\r\n@@ -169,25 +181,44 @@\n           </div>\r\n \r\n           {/* Liste déroulante pour ajouter d'autres classes */}\r\n           <div className=\"mb-4\">\r\n-            <label className=\"block text-gray-700\">\r\n-              Ajouter d'autres classes\r\n-            </label>\r\n-            <select\r\n-              className=\"border p-2 w-full rounded-md\"\r\n-              onChange={handleAddClasse}\r\n-              defaultValue=\"\"\r\n-            >\r\n-              <option value=\"\" disabled>\r\n-                Sélectionner une classe\r\n-              </option>\r\n-              {otherClasses.map((classe) => (\r\n-                <option key={classe._id} value={classe._id}>\r\n-                  {classe.niveau} {classe.nomClasse}\r\n-                </option>\r\n-              ))}\r\n-            </select>\r\n+            <label className=\"block text-gray-700\">Ajouter des classes</label>\r\n+            <div className=\"relative\">\r\n+              <button\r\n+                type=\"button\"\r\n+                className=\"border p-2 w-full rounded-md text-left bg-white flex justify-between items-center\"\r\n+                onClick={toggleDropdown}\r\n+              >\r\n+                <span>Sélectionner des classes</span>\r\n+                <span>{isDropdownOpen ? \"▲\" : \"▼\"}</span>\r\n+              </button>\r\n+              {isDropdownOpen && (\r\n+                <div className=\"absolute z-10 w-full bg-white border rounded-md mt-1 max-h-40 overflow-y-auto shadow-lg\">\r\n+                  {otherClasses.length > 0 ? (\r\n+                    otherClasses.map((classe) => (\r\n+                      <label\r\n+                        key={classe._id}\r\n+                        className=\"flex items-center p-2 hover:bg-gray-100 cursor-pointer\"\r\n+                      >\r\n+                        <input\r\n+                          type=\"checkbox\"\r\n+                          value={classe._id}\r\n+                          checked={selectedClasseIds.includes(classe._id)}\r\n+                          onChange={() => handleAddClasse(classe._id)}\r\n+                          className=\"mr-2\"\r\n+                        />\r\n+                        {classe.niveau} {classe.nomClasse}\r\n+                      </label>\r\n+                    ))\r\n+                  ) : (\r\n+                    <div className=\"p-2 text-gray-500\">\r\n+                      Aucune classe disponible\r\n+                    </div>\r\n+                  )}\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n             {errors.classes && (\r\n               <p className=\"text-red-500 text-sm mt-1\">{errors.classes}</p>\r\n             )}\r\n           </div>\r\n@@ -197,15 +228,30 @@\n             <div className=\"mb-4\">\r\n               <label className=\"block text-gray-700\">Classes ajoutées :</label>\r\n               <ul className=\"list-disc pl-5 text-gray-800\">\r\n                 {selectedClasseIds.map((id) => {\r\n-                  const classe = otherClasses.find(\r\n-                    (classe) => classe._id === id\r\n-                  );\r\n+                  const classe =\r\n+                    id === selectedClasse._id\r\n+                      ? selectedClasse\r\n+                      : otherClasses.find((c) => c._id === id);\r\n                   return (\r\n                     classe && (\r\n-                      <li key={id}>\r\n-                        {classe.niveau} {classe.nomClasse}\r\n+                      <li\r\n+                        key={id}\r\n+                        className=\"flex justify-between items-center\"\r\n+                      >\r\n+                        <span>\r\n+                          {classe.niveau} {classe.nomClasse}\r\n+                        </span>\r\n+                        {id !== selectedClasse._id && (\r\n+                          <button\r\n+                            onClick={() => handleRemoveClasse(id)}\r\n+                            className=\"text-red-500 ml-2 hover:text-red-700\"\r\n+                            title=\"Supprimer cette classe\"\r\n+                          >\r\n+                            <FaTrash />\r\n+                          </button>\r\n+                        )}\r\n                       </li>\r\n                     )\r\n                   );\r\n                 })}\r\n@@ -216,9 +262,9 @@\n           <div className=\"mb-4\">\r\n             <label className=\"block text-gray-700\">Spécialité</label>\r\n             <select\r\n               className=\"border p-2 w-full rounded-md\"\r\n-              onChange={(e) => SetSpecialite(e.target.value)}\r\n+              onChange={(e) => setSpecialite(e.target.value)}\r\n               defaultValue=\"\"\r\n             >\r\n               <option value=\"\" disabled>\r\n                 Sélectionner une Spécialité\r\n@@ -254,5 +300,5 @@\n     )\r\n   );\r\n }\r\n \r\n-export default AjouterEnseignant;\r\n+export default AjouterEnseignant;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748456069738,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ApiEnseignant from \"../Api/Enseignant\";\r\nimport Apiclasse from \"../Api/classe\";\r\nimport ApiSpecialite from \"../Api/Specialite\";\r\n\r\nfunction AjouterEnseignant({ isOpen, closeModal, selectedClasse, fetchdata }) {\r\n  const [nom, setNom] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [motDePasse, setMotDePasse] = useState(\"\");\r\n  const [specialite, SetSpecialite] = useState(\"\");\r\nconst [specialites, setSpecialites] = useState([]);\r\n  const [otherClasses, setOtherClasses] = useState([]);\r\n  const [selectedClasseIds, setSelectedClasseIds] = useState([\r\n    selectedClasse._id,\r\n  ]); // Initialiser avec selectedClasse._id\r\n const [errors, setErrors] = useState({});\r\n  const getAllClasses = async () => {\r\n    try {\r\n      const dataResponse = await fetch(Apiclasse.getAllClasse.url, {\r\n        method: Apiclasse.getAllClasse.method,\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      const response = await dataResponse.json();\r\n      const filteredClasses = response?.result?.filter(\r\n        (classe) => classe._id !== selectedClasse._id\r\n      );\r\n      setOtherClasses(filteredClasses || []);\r\n    } catch (error) {\r\n      console.log(\"errrrr\", error);\r\n    }\r\n  };\r\n\r\n  const getAllSpecialite = async () => {\r\n    try {\r\n      const dataResponse = await fetch(ApiSpecialite.getAllSpecialite.url, {\r\n        method: ApiSpecialite.getAllSpecialite.method,\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      const response = await dataResponse.json();\r\n      setSpecialites(response?.result || []);\r\n      console.log(\"response?.result\", response?.result);\r\n    } catch (error) {\r\n      console.log(\"Erreur lors de la récupération des specialite\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getAllClasses();\r\n    getAllSpecialite()\r\n  }, [selectedClasse]);\r\n\r\n  const handleAddClasse = (e) => {\r\n    const selectedId = e.target.value;\r\n\r\n    // Empêcher les doublons\r\n    if (!selectedClasseIds.includes(selectedId)) {\r\n      setSelectedClasseIds([...selectedClasseIds, selectedId]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n   const newErrors = {};\r\n    if (!nom) newErrors.nom = \"Champ obligatoire\";\r\n    if (!email) newErrors.email = \"Champ obligatoire\";\r\n    if (!motDePasse) newErrors.motDePasse = \"Champ obligatoire\";\r\n    if (!specialite) newErrors.specialite = \"Champ obligatoire\";\r\n    if (selectedClasseIds.length === 0) newErrors.classes = \"Champ obligatoire\";\r\n    setErrors(newErrors);\r\n\r\n    if (Object.keys(newErrors).length > 0) {\r\n      return;\r\n    }\r\n\r\n    const dataResponse = await fetch(ApiEnseignant.AjouterEnseignant.url, {\r\n      method: ApiEnseignant.AjouterEnseignant.method,\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        nom: nom,\r\n        email: email,\r\n        motDePasse: motDePasse,\r\n        specialite: specialite,\r\n        classes: selectedClasseIds,\r\n      }),\r\n    });\r\n    const response = await dataResponse.json();\r\n    if (response.success) {\r\n      toast.success(response.msg);\r\n      fetchdata();\r\n      // Après 2 secondes (2000ms), on ferme le modal\r\n      setTimeout(() => {\r\n        closeModal();\r\n      }, 2000);\r\n    } else {\r\n      toast.error(response.msg);\r\n    }\r\n  };\r\n\r\n  return (\r\n    isOpen && (\r\n      <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50\">\r\n        <ToastContainer position=\"top-center\" />\r\n        <div className=\"bg-white p-6 rounded-md shadow-lg w-[600px] max-h-[80vh] overflow-y-auto\">\r\n          <h2 className=\"text-xl text-center font-semibold mb-4\">\r\n            Ajouter un Enseignant\r\n          </h2>\r\n\r\n          {/* Formulaire */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Nom</label>\r\n            <input\r\n              type=\"text\"\r\n              value={nom}\r\n              onChange={(e) => setNom(e.target.value)}\r\n              className=\"border p-2 w-full rounded-md\"\r\n              placeholder=\"Nom\"\r\n            />\r\n                {errors.nom && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.nom}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"border p-2 w-full rounded-md\"\r\n              placeholder=\"Email\"\r\n            />\r\n               {errors.email && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Mot de passe</label>\r\n            <input\r\n              type=\"password\"\r\n              value={motDePasse}\r\n              onChange={(e) => setMotDePasse(e.target.value)}\r\n              className=\"border p-2 w-full rounded-md\"\r\n              placeholder=\"Mot de passe\"\r\n            />\r\n               {errors.motDePasse && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.motDePasse}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Classe sélectionnée (principale) */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Classe sélectionnée</label>\r\n            <input\r\n              type=\"text\"\r\n              value={selectedClasse.niveau + \" \" + selectedClasse.nomClasse}\r\n              disabled\r\n              className=\"border p-2 w-full rounded-md\"\r\n            />\r\n          </div>\r\n\r\n          {/* Liste déroulante pour ajouter d'autres classes */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">\r\n              Ajouter d'autres classes\r\n            </label>\r\n            <select\r\n              className=\"border p-2 w-full rounded-md\"\r\n              onChange={handleAddClasse}\r\n              defaultValue=\"\"\r\n            >\r\n              <option value=\"\" disabled>\r\n                Sélectionner une classe\r\n              </option>\r\n              {otherClasses.map((classe) => (\r\n                <option key={classe._id} value={classe._id}>\r\n                  {classe.niveau} {classe.nomClasse}\r\n                </option>\r\n              ))}\r\n            </select>\r\n             {errors.classes && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.classes}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Liste des classes ajoutées */}\r\n          {selectedClasseIds.length > 0 && (\r\n            <div className=\"mb-4\">\r\n              <label className=\"block text-gray-700\">Classes ajoutées :</label>\r\n              <ul className=\"list-disc pl-5 text-gray-800\">\r\n                {selectedClasseIds.map((id) => {\r\n                  const classe = otherClasses.find(\r\n                    (classe) => classe._id === id\r\n                  );\r\n                  return (\r\n                    classe && (\r\n                      <li key={id}>\r\n                        {classe.niveau} {classe.nomClasse}\r\n                      </li>\r\n                    )\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n      <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Spécialité</label>\r\n            <select\r\n              className=\"border p-2 w-full rounded-md\"\r\n              onChange={(e) => SetSpecialite(e.target.value)}\r\n              defaultValue=\"\"\r\n            >\r\n              <option value=\"\" disabled>\r\n                Sélectionner une Spécialité\r\n              </option>\r\n              {specialites?.map((sp) => (\r\n                <option key={sp?._id} value={sp?.label}>\r\n                  {sp?.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.specialite && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.specialite}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Actions */}\r\n          <div className=\"flex justify-end gap-4\">\r\n            <button\r\n              onClick={closeModal}\r\n              className=\"bg-gray-300 text-gray-700 px-4 py-2 rounded-md\"\r\n            >\r\n              Annuler\r\n            </button>\r\n            <button\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded-md\"\r\n              onClick={handleSubmit}\r\n            >\r\n              Ajouter\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default AjouterEnseignant;\r\n"
        }
    ]
}