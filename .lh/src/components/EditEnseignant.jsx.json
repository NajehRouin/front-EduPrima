{
    "sourceFile": "src/components/EditEnseignant.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748457429434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748459204536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,13 @@\n   const [email, setEmail] = useState(\"\");\r\n   const [motDePasse, setMotDePasse] = useState(\"\");\r\n   const [specialite, setSpecialite] = useState(\"\");\r\n   const [specialites, setSpecialites] = useState([]);\r\n-  const [otherClasses, setOtherClasses] = useState([]);\r\n+  const [allClasses, setAllClasses] = useState([]); // Store all classes\r\n+  const [otherClasses, setOtherClasses] = useState([]); // Store classes not yet selected\r\n   const [selectedClasseIds, setSelectedClasseIds] = useState([]);\r\n   const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n   const [errors, setErrors] = useState({});\r\n-  const [selectedClasse, setSelectedClasse] = useState(null);\r\n \r\n   // Fetch teacher data by ID\r\n   const fetchEnseignant = async () => {\r\n     try {\r\n@@ -35,10 +35,10 @@\n         setNom(enseignant.nom);\r\n         setEmail(enseignant.email);\r\n         setSpecialite(enseignant.specialite);\r\n         setSelectedClasseIds(enseignant.classes.map((classe) => classe._id));\r\n-        // Set the first class as the default selectedClasse\r\n-        setSelectedClasse(enseignant.classes[0] || null);\r\n+        // Store all classes from the teacher for rendering\r\n+        setAllClasses(enseignant.classes);\r\n       } else {\r\n         toast.error(\"Erreur lors du chargement des données de l'enseignant\");\r\n       }\r\n     } catch (error) {\r\n@@ -57,12 +57,13 @@\n           \"Content-Type\": \"application/json\",\r\n         },\r\n       });\r\n       const response = await dataResponse.json();\r\n-      const filteredClasses = response?.result?.filter(\r\n-        (classe) => !selectedClasseIds.includes(classe._id)\r\n+      setOtherClasses(\r\n+        response?.result?.filter(\r\n+          (classe) => !selectedClasseIds.includes(classe._id)\r\n+        ) || []\r\n       );\r\n-      setOtherClasses(filteredClasses || []);\r\n     } catch (error) {\r\n       console.error(\"Erreur lors de la récupération des classes\", error);\r\n     }\r\n   };\r\n@@ -105,14 +106,21 @@\n     if (selectedClasseIds.includes(classeId)) {\r\n       setSelectedClasseIds(selectedClasseIds.filter((id) => id !== classeId));\r\n     } else {\r\n       setSelectedClasseIds([...selectedClasseIds, classeId]);\r\n+      // Add the selected class to allClasses for rendering\r\n+      const selectedClass = otherClasses.find((c) => c._id === classeId);\r\n+      if (selectedClass && !allClasses.some((c) => c._id === classeId)) {\r\n+        setAllClasses([...allClasses, selectedClass]);\r\n+      }\r\n     }\r\n   };\r\n \r\n   const handleRemoveClasse = (classeId) => {\r\n     if (selectedClasseIds.length > 1) {\r\n       setSelectedClasseIds(selectedClasseIds.filter((id) => id !== classeId));\r\n+      // Optionally remove from allClasses if needed\r\n+      // setAllClasses(allClasses.filter((c) => c._id !== classeId));\r\n     } else {\r\n       toast.error(\"L'enseignant doit être associé à au moins une classe\");\r\n     }\r\n   };\r\n@@ -139,9 +147,9 @@\n         body: JSON.stringify({\r\n           idEnseignant: enseignantId,\r\n           nom,\r\n           email,\r\n-          motDePasse: motDePasse || undefined, // Only send password if provided\r\n+          motDePasse: motDePasse || undefined,\r\n           specialite,\r\n           classes: selectedClasseIds,\r\n         }),\r\n       });\r\n@@ -258,11 +266,9 @@\n             <div className=\"mb-4\">\r\n               <label className=\"block text-gray-700\">Classes ajoutées :</label>\r\n               <ul className=\"list-disc pl-5 text-gray-800\">\r\n                 {selectedClasseIds.map((id) => {\r\n-                  const classe =\r\n-                    otherClasses.find((c) => c._id === id) ||\r\n-                    (selectedClasse?._id === id ? selectedClasse : null);\r\n+                  const classe = allClasses.find((c) => c._id === id);\r\n                   return (\r\n                     classe && (\r\n                       <li\r\n                         key={id}\r\n@@ -327,5 +333,5 @@\n     )\r\n   );\r\n }\r\n \r\n-export default EditEnseignant;\r\n+export default EditEnseignant;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748457429434,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport ApiEnseignant from \"../Api/Enseignant\";\r\nimport Apiclasse from \"../Api/classe\";\r\nimport ApiSpecialite from \"../Api/Specialite\";\r\n\r\nfunction EditEnseignant({ isOpen, closeModal, enseignantId, fetchdata }) {\r\n  const [nom, setNom] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [motDePasse, setMotDePasse] = useState(\"\");\r\n  const [specialite, setSpecialite] = useState(\"\");\r\n  const [specialites, setSpecialites] = useState([]);\r\n  const [otherClasses, setOtherClasses] = useState([]);\r\n  const [selectedClasseIds, setSelectedClasseIds] = useState([]);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [selectedClasse, setSelectedClasse] = useState(null);\r\n\r\n  // Fetch teacher data by ID\r\n  const fetchEnseignant = async () => {\r\n    try {\r\n      const dataResponse = await fetch(ApiEnseignant.getEnseignantById.url, {\r\n        method: ApiEnseignant.getEnseignantById.method,\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ idEnseignant: enseignantId }),\r\n      });\r\n      const response = await dataResponse.json();\r\n      if (response.success) {\r\n        const enseignant = response.result;\r\n        setNom(enseignant.nom);\r\n        setEmail(enseignant.email);\r\n        setSpecialite(enseignant.specialite);\r\n        setSelectedClasseIds(enseignant.classes.map((classe) => classe._id));\r\n        // Set the first class as the default selectedClasse\r\n        setSelectedClasse(enseignant.classes[0] || null);\r\n      } else {\r\n        toast.error(\"Erreur lors du chargement des données de l'enseignant\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Erreur lors du chargement des données\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Fetch all classes\r\n  const getAllClasses = async () => {\r\n    try {\r\n      const dataResponse = await fetch(Apiclasse.getAllClasse.url, {\r\n        method: Apiclasse.getAllClasse.method,\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const response = await dataResponse.json();\r\n      const filteredClasses = response?.result?.filter(\r\n        (classe) => !selectedClasseIds.includes(classe._id)\r\n      );\r\n      setOtherClasses(filteredClasses || []);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des classes\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch all specialties\r\n  const getAllSpecialite = async () => {\r\n    try {\r\n      const dataResponse = await fetch(ApiSpecialite.getAllSpecialite.url, {\r\n        method: ApiSpecialite.getAllSpecialite.method,\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const response = await dataResponse.json();\r\n      setSpecialites(response?.result || []);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des spécialités\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      fetchEnseignant();\r\n      getAllSpecialite();\r\n    }\r\n  }, [isOpen, enseignantId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedClasseIds.length > 0) {\r\n      getAllClasses();\r\n    }\r\n  }, [selectedClasseIds]);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(!isDropdownOpen);\r\n  };\r\n\r\n  const handleAddClasse = (classeId) => {\r\n    if (selectedClasseIds.includes(classeId)) {\r\n      setSelectedClasseIds(selectedClasseIds.filter((id) => id !== classeId));\r\n    } else {\r\n      setSelectedClasseIds([...selectedClasseIds, classeId]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveClasse = (classeId) => {\r\n    if (selectedClasseIds.length > 1) {\r\n      setSelectedClasseIds(selectedClasseIds.filter((id) => id !== classeId));\r\n    } else {\r\n      toast.error(\"L'enseignant doit être associé à au moins une classe\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const newErrors = {};\r\n    if (!nom) newErrors.nom = \"Champ obligatoire\";\r\n    if (!email) newErrors.email = \"Champ obligatoire\";\r\n    if (!specialite) newErrors.specialite = \"Champ obligatoire\";\r\n    if (selectedClasseIds.length === 0) newErrors.classes = \"Champ obligatoire\";\r\n    setErrors(newErrors);\r\n\r\n    if (Object.keys(newErrors).length > 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const dataResponse = await fetch(ApiEnseignant.updateEnseignant.url, {\r\n        method: ApiEnseignant.updateEnseignant.method,\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          idEnseignant: enseignantId,\r\n          nom,\r\n          email,\r\n          motDePasse: motDePasse || undefined, // Only send password if provided\r\n          specialite,\r\n          classes: selectedClasseIds,\r\n        }),\r\n      });\r\n      const response = await dataResponse.json();\r\n      if (response.success) {\r\n        toast.success(\"Enseignant mis à jour avec succès\");\r\n        fetchdata();\r\n        setTimeout(() => {\r\n          closeModal();\r\n        }, 2000);\r\n      } else {\r\n        toast.error(response.msg || \"Erreur lors de la mise à jour\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Erreur lors de la mise à jour\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    isOpen && (\r\n      <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50\">\r\n        <ToastContainer position=\"top-center\" />\r\n        <div className=\"bg-white p-6 rounded-md shadow-lg w-[600px] max-h-[80vh] overflow-y-auto\">\r\n          <h2 className=\"text-xl text-center font-semibold mb-4\">\r\n            Modifier un Enseignant\r\n          </h2>\r\n\r\n          {/* Formulaire */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Nom</label>\r\n            <input\r\n              type=\"text\"\r\n              value={nom}\r\n              onChange={(e) => setNom(e.target.value)}\r\n              className=\"border p-2 w-full rounded-md\"\r\n              placeholder=\"Nom\"\r\n            />\r\n            {errors.nom && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.nom}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"border p-2 w-full rounded-md\"\r\n              placeholder=\"Email\"\r\n            />\r\n            {errors.email && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Mot de passe (facultatif)</label>\r\n            <input\r\n              type=\"password\"\r\n              value={motDePasse}\r\n              onChange={(e) => setMotDePasse(e.target.value)}\r\n              className=\"border p-2 w-full rounded-md\"\r\n              placeholder=\"Nouveau mot de passe\"\r\n            />\r\n          </div>\r\n\r\n          {/* Liste déroulante pour ajouter d'autres classes */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Ajouter des classes</label>\r\n            <div className=\"relative\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"border p-2 w-full rounded-md text-left bg-white flex justify-between items-center\"\r\n                onClick={toggleDropdown}\r\n              >\r\n                <span>Sélectionner des classes</span>\r\n                <span>{isDropdownOpen ? \"▲\" : \"▼\"}</span>\r\n              </button>\r\n              {isDropdownOpen && (\r\n                <div className=\"absolute z-10 w-full bg-white border rounded-md mt-1 max-h-40 overflow-y-auto shadow-lg\">\r\n                  {otherClasses.length > 0 ? (\r\n                    otherClasses.map((classe) => (\r\n                      <label\r\n                        key={classe._id}\r\n                        className=\"flex items-center p-2 hover:bg-gray-100 cursor-pointer\"\r\n                      >\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          value={classe._id}\r\n                          checked={selectedClasseIds.includes(classe._id)}\r\n                          onChange={() => handleAddClasse(classe._id)}\r\n                          className=\"mr-2\"\r\n                        />\r\n                        {classe.niveau} {classe.nomClasse}\r\n                      </label>\r\n                    ))\r\n                  ) : (\r\n                    <div className=\"p-2 text-gray-500\">\r\n                      Aucune classe disponible\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n            {errors.classes && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.classes}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Liste des classes ajoutées */}\r\n          {selectedClasseIds.length > 0 && (\r\n            <div className=\"mb-4\">\r\n              <label className=\"block text-gray-700\">Classes ajoutées :</label>\r\n              <ul className=\"list-disc pl-5 text-gray-800\">\r\n                {selectedClasseIds.map((id) => {\r\n                  const classe = otherClasses.find((c) => c._id === id) || (selectedClasse?._id === id ? selectedClasse : null);\r\n                  return (\r\n                    classe && (\r\n                      <li\r\n                        key={id}\r\n                        className=\"flex justify-between items-center\"\r\n                      >\r\n                        <span>\r\n                          {classe.niveau} {classe.nomClasse}\r\n                        </span>\r\n                        <button\r\n                          onClick={() => handleRemoveClasse(id)}\r\n                          className=\"text-red-500 ml-2 hover:text-red-700\"\r\n                          title=\"Supprimer cette classe\"\r\n                        >\r\n                          <FaTrash />\r\n                        </button>\r\n                      </li>\r\n                    )\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700\">Spécialité</label>\r\n            <select\r\n              className=\"border p-2 w-full rounded-md\"\r\n              value={specialite}\r\n              onChange={(e) => setSpecialite(e.target.value)}\r\n            >\r\n              <option value=\"\" disabled>\r\n                Sélectionner une Spécialité\r\n              </option>\r\n              {specialites?.map((sp) => (\r\n                <option key={sp?._id} value={sp?.label}>\r\n                  {sp?.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.specialite && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.specialite}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Actions */}\r\n          <div className=\"flex justify-end gap-4\">\r\n            <button\r\n              onClick={closeModal}\r\n              className=\"bg-gray-300 text-gray-700 px-4 py-2 rounded-md\"\r\n            >\r\n              Annuler\r\n            </button>\r\n            <button\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded-md\"\r\n              onClick={handleSubmit}\r\n            >\r\n              Mettre à jour\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default EditEnseignant;"
        }
    ]
}